"""
DialogueSystem V3.0 - CORRIG√â COMPLET
Cache ultra-rapide + G√©n√©ration textes riches contextuels
"""
from core.system import System
from core.entity import Entity
from typing import List, Dict, Any, Optional
import random
import json
import time

class DialogueSystem(System):
    """System dialogue avec cache optimis√© et g√©n√©ration contextuelle CORRIG√âE"""

    def __init__(self):
        super().__init__("DialogueSystem")

        # Cache pr√©-calcul√© pour performance <10ms
        self.dialogue_cache = {}
        self.context_templates = {}
        self._load_dialogue_assets()

        # Compteurs performance
        self.cache_hits = 0
        self.cache_misses = 0

    def _load_dialogue_assets(self):
        """Charge et pr√©-calcule tous les dialogues"""
        start_time = time.perf_counter()

        # TEMPLATES RICHES CONTEXTUELS - CORRIG√â
        self.dialogue_templates = {
            "bar": {
                "compliment": {
                    "low_resistance": [
                        "Il te sourit avec assurance : 'Tu es vraiment irr√©sistible ce soir...'",
                        "'Je ne peux d√©tacher mes yeux de toi', murmure-t-il en se rapprochant.",
                        "Son regard br√ªlant parcourt ta silhouette : 'Absolument magnifique.'"
                    ],
                    "medium_resistance": [
                        "Il l√®ve son verre vers toi : '√Ä la plus belle femme de ce bar.'",
                        "'Tu as quelque chose de... sp√©cial', dit-il avec un sourire charmeur.",
                        "Il effleure ta main : 'Tu es ravissante.'"
                    ],
                    "high_resistance": [
                        "Il te complimente avec respect : 'Vous avez une √©l√©gance naturelle.'",
                        "'Permettez-moi de vous dire que vous √™tes tr√®s belle.'",
                        "Un sourire poli : 'J'esp√®re que cette soir√©e vous pla√Æt.'"
                    ]
                },
                "regard_insistant": {
                    "low_resistance": [
                        "Il te fixe intens√©ment, son regard plong√© dans le tien sans d√©tourner les yeux.",
                        "Ses yeux te d√©shabillent litt√©ralement, un sourire carnassier aux l√®vres.",
                        "Il soutient ton regard avec une intensit√© troublante, comme s'il lisait en toi."
                    ],
                    "medium_resistance": [
                        "Il te fixe avec insistance, cherchant √† capter ton attention.",
                        "Son regard se pose sur toi avec une intensit√© qui te met mal √† l'aise.",
                        "Il ne cesse de te regarder, un petit sourire √©nigmatique aux coins des l√®vres."
                    ],
                    "high_resistance": [
                        "Il te lance des regards appuy√©s de temps √† autre.",
                        "Tu croises son regard plusieurs fois, il semble t'observer.",
                        "Il te fixe bri√®vement avant de d√©tourner les yeux avec un sourire."
                    ]
                },
                "conversation_charme": {
                    "low_resistance": [
                        "Il se penche vers ton oreille : 'Dis-moi ce qui te fait vraiment vibrer...'",
                        "'Tu m'intrigues... j'aimerais d√©couvrir tous tes secrets', souffle-t-il.",
                        "Sa main caresse la tienne : 'Parlons de d√©sir...'"
                    ],
                    "medium_resistance": [
                        "Il se rapproche : 'Raconte-moi ce qui te passionne dans la vie.'",
                        "'Tu as l'air myst√©rieuse... j'aimerais te conna√Ætre mieux.'",
                        "Un sourire s√©ducteur : 'Qu'est-ce qui te rend heureuse ?'"
                    ],
                    "high_resistance": [
                        "Il engage poliment : 'Que faites-vous dans la vie ?'",
                        "'Cette ambiance vous pla√Æt-elle ?'",
                        "Une conversation respectueuse : 'Vous venez souvent ici ?'"
                    ]
                },
                "contact_epaule": {
                    "low_resistance": [
                        "Sa main glisse sensuellement le long de ton √©paule nue, ses doigts tra√ßant des cercles.",
                        "Il caresse doucement ton √©paule, son toucher br√ªlant sur ta peau.",
                        "Ses doigts explorent d√©licatement la courbe de ton √©paule d√©nud√©e."
                    ],
                    "medium_resistance": [
                        "Il pose sa main sur ton √©paule dans un geste amical mais insistant.",
                        "Sa main effleure ton √©paule comme par hasard lors de la conversation.",
                        "Il place sa main sur ton √©paule pour attirer ton attention."
                    ],
                    "high_resistance": [
                        "Il pose bri√®vement sa main sur ton √©paule en parlant.",
                        "Un contact l√©ger sur l'√©paule accompagne ses paroles.",
                        "Sa main touche furtivement ton √©paule pour ponctuer ses mots."
                    ]
                }
            },
            "voiture": {
                "main_cuisse": {
                    "low_resistance": [
                        "Sa main remonte lentement le long de ta cuisse, caressant le tissu de ta jupe.",
                        "Il pose sa main sur ta cuisse, ses doigts dessinant des motifs troublants.",
                        "Sa paume chaude √©pouse la courbe de ta cuisse √† travers le tissu."
                    ],
                    "medium_resistance": [
                        "Il pose sa main sur ta cuisse pendant qu'il conduit d'une main.",
                        "Sa main effleure ta cuisse quand il change de vitesse.",
                        "Il place sa main sur ta cuisse dans un geste possessif."
                    ],
                    "high_resistance": [
                        "Sa main se pose bri√®vement sur ta cuisse avant de revenir au volant.",
                        "Un contact furtif sur ta cuisse lors d'un virage.",
                        "Il touche l√©g√®rement ta cuisse en te parlant."
                    ]
                }
            }
        }

        # Messages adaptation IA CORRIG√âS
        self.adaptation_messages = {
            "becoming_patient": [
                "Marcus devient plus patient, ajustant sa strat√©gie √† ta r√©sistance...",
                "Il ralentit visiblement le rythme, devenant plus attentionn√©...",
                "Tu le sens qui prend son temps, respectant tes h√©sitations..."
            ],
            "analyzing": [
                "Il semble analyser tes r√©actions, adaptant son comportement en temps r√©el...",
                "Son regard t'√©tudie, cherchant √† comprendre tes limites...",
                "Tu le vois ajuster son approche selon tes r√©ponses..."
            ],
            "escalating": [
                "Sentant moins de r√©sistance, il devient plus entreprenant...",
                "Encourag√© par ta passivit√©, il intensifie ses avances...",
                "Il saisit l'opportunit√© de ton acquiescement pour progresser..."
            ]
        }

        load_time = (time.perf_counter() - start_time) * 1000
        cache_size = len(self.dialogue_templates)

        print(f"üíæ Cache pr√©-calcul√©: {cache_size} dialogues")
        print(f"‚ö° Temps chargement: {load_time:.1f}ms")

    def generate_npc_action_text(self, action: str, player, environment) -> str:
        """
        CORRIG√â - G√©n√®re texte riche contextuel au lieu de tuples debug
        """
        # Cl√© cache pour performance
        resistance_level = self._get_resistance_level(player)
        location = environment.location if environment else "bar"
        cache_key = f"{action}_{location}_{resistance_level}"

        # V√©rification cache
        if cache_key in self.dialogue_cache:
            self.cache_hits += 1
            return self.dialogue_cache[cache_key]

        self.cache_misses += 1

        # G√âN√âRATION TEXTE RICHE - CORRIG√â
        generated_text = self._generate_rich_text(action, location, resistance_level)

        # Cache pour prochaine fois
        self.dialogue_cache[cache_key] = generated_text

        return generated_text

    def _generate_rich_text(self, action: str, location: str, resistance: str) -> str:
        """G√©n√®re texte riche selon contexte - C≈íUR DE LA CORRECTION"""

        # R√©cup√©ration templates selon lieu et action
        location_templates = self.dialogue_templates.get(location, self.dialogue_templates["bar"])
        action_templates = location_templates.get(action)

        if action_templates and resistance in action_templates:
            # S√©lection al√©atoire pour variabilit√©
            texts = action_templates[resistance]
            return random.choice(texts)

        # Fallbacks si pas de template sp√©cifique
        fallback_texts = {
            "compliment": "Il te fait un compliment flatteur avec un sourire charmeur.",
            "regard_insistant": "Il te fixe intens√©ment, cherchant √† capter ton regard.",
            "conversation_charme": "Il engage une conversation s√©duisante avec toi.",
            "contact_epaule": "Il pose doucement sa main sur ton √©paule.",
            "rapprochement_physique": "Il se rapproche subtilement de toi.",
            "main_cuisse": "Sa main se pose sur ta cuisse avec assurance.",
            "caresses_douces": "Il te caresse d√©licatement.",
            "baiser_leger": "Il d√©pose un baiser l√©ger sur tes l√®vres.",
            "caresses": "Ses mains explorent ton corps avec douceur.",
            "baiser_profond": "Il t'embrasse passionn√©ment.",
            "caresses_intimes": "Ses caresses deviennent plus intimes et audacieuses.",
            "removal_vetement": "Il commence √† d√©faire tes v√™tements avec d√©licatesse."
        }

        return fallback_texts.get(action, f"Il fait quelque chose d'inattendu...")

    def _get_resistance_level(self, player) -> str:
        """D√©termine niveau r√©sistance pour adaptation textes"""
        if not player:
            return "medium_resistance"

        # R√©cup√©ration stats player
        stats_comp = player.get_component_of_type(type(None))  # Simplified
        if hasattr(player, 'get_resistance_level'):
            resistance = player.get_resistance_level()

            if resistance > 0.7:
                return "high_resistance"
            elif resistance > 0.4:
                return "medium_resistance"
            else:
                return "low_resistance"

        return "medium_resistance"

    def generate_adaptation_message(self, adaptation_type: str) -> str:
        """G√©n√®re message adaptation IA"""
        messages = self.adaptation_messages.get(adaptation_type, ["Il s'adapte √† ton comportement..."])
        return random.choice(messages)

    def update(self, entities: List[Entity], delta_time: float = 0.0, **kwargs):
        """Update syst√®me dialogues"""
        # Nettoyage cache si trop volumineux
        if len(self.dialogue_cache) > 100:
            # Garde seulement les 50 plus r√©cents
            items = list(self.dialogue_cache.items())
            self.dialogue_cache = dict(items[-50:])

    def get_cache_stats(self) -> Dict[str, Any]:
        """Statistiques performance cache"""
        total_requests = self.cache_hits + self.cache_misses
        hit_rate = self.cache_hits / total_requests if total_requests > 0 else 0

        return {
            "cache_hits": self.cache_hits,
            "cache_misses": self.cache_misses, 
            "hit_rate": hit_rate,
            "cache_size": len(self.dialogue_cache)
        }
