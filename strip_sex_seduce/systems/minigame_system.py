"""
MiniGameSystem V2.0 - Framework mini-jeux int√©gr√©s
"""
from core.system import System
from core.entity import Entity
from components.stats import StatsComponent
from components.seduction import SeductionComponent
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import random
import json

@dataclass
class MiniGameResult:
    """R√©sultat d'un mini-jeu"""
    success: bool
    score: int
    performance_rating: str  # poor, good, excellent
    effects: Dict[str, int]
    narrative_result: str
    bonus_unlocks: List[str]

class MiniGameSystem(System):
    """System pour gestion mini-jeux int√©gr√©s"""

    def __init__(self):
        super().__init__("MiniGameSystem")
        self.active_minigames = {}  # Sessions mini-jeux actives
        self.minigame_configs = {}
        self._load_minigame_configs()

    def _load_minigame_configs(self):
        """Charge configurations mini-jeux"""
        try:
            with open("assets/minigames/minigame_config.json", 'r', encoding='utf-8') as f:
                self.minigame_configs = json.load(f)
        except FileNotFoundError:
            self.minigame_configs = self._get_default_minigame_configs()

    def update(self, entities: List[Entity], delta_time: float = 0.0, **kwargs):
        """Update mini-jeux actifs"""
        # Cleanup mini-jeux termin√©s
        expired_games = []
        for session_id, game_session in self.active_minigames.items():
            if game_session.get('status') == 'completed':
                expired_games.append(session_id)

        for session_id in expired_games:
            del self.active_minigames[session_id]

    def start_minigame(self, game_type: str, player_entity: Entity, npc_entity: Entity, context: Dict[str, Any]) -> Dict[str, Any]:
        """D√©marre nouveau mini-jeu"""
        if game_type not in self.minigame_configs:
            return {"success": False, "error": f"Mini-jeu {game_type} non configur√©"}

        # V√©rification requirements
        requirements_check = self._check_minigame_requirements(game_type, player_entity, context)
        if not requirements_check["valid"]:
            return {"success": False, "error": requirements_check["reason"]}

        # Cr√©ation session mini-jeu
        session_id = f"{game_type}_{datetime.now().timestamp()}"
        game_config = self.minigame_configs[game_type]

        game_session = {
            "session_id": session_id,
            "game_type": game_type,
            "player_entity": player_entity,
            "npc_entity": npc_entity,
            "context": context.copy(),
            "config": game_config.copy(),
            "status": "active",
            "current_step": 0,
            "player_inputs": [],
            "performance_metrics": {
                "timing_scores": [],
                "choice_scores": [],
                "bonus_points": 0
            },
            "start_time": datetime.now()
        }

        self.active_minigames[session_id] = game_session

        # G√©n√©ration description d√©marrage
        start_description = self._generate_minigame_start_description(game_type, game_config, context)

        return {
            "success": True,
            "session_id": session_id,
            "game_type": game_type,
            "description": start_description,
            "instructions": game_config.get("instructions", "Suivez les instructions √† l'√©cran")
        }

    def handle_minigame_input(self, session_id: str, player_input: str) -> Dict[str, Any]:
        """Traite input joueur dans mini-jeu"""
        if session_id not in self.active_minigames:
            return {"success": False, "error": "Session mini-jeu non trouv√©e"}

        game_session = self.active_minigames[session_id]
        if game_session["status"] != "active":
            return {"success": False, "error": "Mini-jeu non actif"}

        game_type = game_session["game_type"]

        # Traitement selon type mini-jeu
        if game_type == "strip_tease":
            return self._handle_strip_tease_input(game_session, player_input)
        elif game_type == "massage_sensuel":
            return self._handle_massage_input(game_session, player_input)
        elif game_type == "des_desir":
            return self._handle_dice_input(game_session, player_input)
        elif game_type == "simulation_sexuelle":
            return self._handle_simulation_input(game_session, player_input)
        else:
            return {"success": False, "error": f"Type mini-jeu {game_type} non impl√©ment√©"}

    def _check_minigame_requirements(self, game_type: str, player_entity: Entity, context: Dict[str, Any]) -> Dict[str, Any]:
        """V√©rifie requirements pour mini-jeu"""
        config = self.minigame_configs.get(game_type, {})
        requirements = config.get("requirements", {})

        # V√©rification privacy level
        min_privacy = requirements.get("min_privacy", 0.0)
        current_privacy = context.get("privacy_level", 0.5)
        if current_privacy < min_privacy:
            return {"valid": False, "reason": f"Privacy insuffisante pour {game_type}"}

        # V√©rification arousal
        min_arousal = requirements.get("min_arousal", 0)
        stats_comp = player_entity.get_component_of_type(StatsComponent)
        current_arousal = getattr(stats_comp, 'excitation', 0) if stats_comp else 0
        if current_arousal < min_arousal:
            return {"valid": False, "reason": f"Arousal insuffisant pour {game_type}"}

        # V√©rification level s√©duction
        min_seduction_level = requirements.get("min_seduction_level", 0)
        seduction_comp = player_entity.get_component_of_type(SeductionComponent)
        current_level = seduction_comp.seduction_level if seduction_comp else 0
        if current_level < min_seduction_level:
            return {"valid": False, "reason": f"Niveau s√©duction insuffisant pour {game_type}"}

        return {"valid": True}

    def _generate_minigame_start_description(self, game_type: str, config: Dict[str, Any], context: Dict[str, Any]) -> str:
        """G√©n√®re description d√©marrage mini-jeu"""
        descriptions = config.get("start_descriptions", {})
        location = context.get("location", "default")

        # Description sp√©cifique au lieu ou g√©n√©rique
        return descriptions.get(location, descriptions.get("default", f"Mini-jeu {game_type} commence..."))

    # ========== STRIP-TEASE INTERACTIF ==========
    def _handle_strip_tease_input(self, game_session: Dict[str, Any], player_input: str) -> Dict[str, Any]:
        """Gestion strip-tease interactif"""
        current_step = game_session["current_step"]
        config = game_session["config"]

        if current_step == 0:  # Choix musique
            return self._strip_tease_choose_music(game_session, player_input)
        elif current_step == 1:  # Choix s√©quence d√©shabillage
            return self._strip_tease_choose_sequence(game_session, player_input)
        elif current_step == 2:  # Ex√©cution avec timing
            return self._strip_tease_execute(game_session, player_input)
        else:  # Fin
            return self._strip_tease_finale(game_session)

    def _strip_tease_choose_music(self, game_session: Dict[str, Any], choice: str) -> Dict[str, Any]:
        """√âtape 1 strip-tease: choix musique"""
        music_options = {
            "1": {"type": "slow_sensuel", "tempo": "slow", "style_bonus": 15},
            "2": {"type": "upbeat_energique", "tempo": "fast", "style_bonus": 10},
            "3": {"type": "taquin_playful", "tempo": "variable", "style_bonus": 20}
        }

        if choice not in music_options:
            return {
                "success": False,
                "message": "Choix musique invalide. Options: 1=Sensuel, 2=√ânergique, 3=Taquin",
                "continue": True
            }

        selected_music = music_options[choice]
        game_session["music_choice"] = selected_music
        game_session["current_step"] = 1

        return {
            "success": True,
            "message": f"üéµ Musique s√©lectionn√©e: {selected_music['type']}\n\nüëó S√âQUENCE D√âSHABILLAGE - Dans quel ordre ?\n1. Classique (haut ‚Üí bas)\n2. Taquin (alternance)\n3. Surprise (ordre al√©atoire)\n4. Personnalis√© (tu choisis)",
            "continue": True
        }

    def _strip_tease_choose_sequence(self, game_session: Dict[str, Any], choice: str) -> Dict[str, Any]:
        """√âtape 2: choix s√©quence d√©shabillage"""
        sequence_options = {
            "1": {"type": "classique", "sequence": ["chemisier", "jupe", "soutien_gorge", "culotte"]},
            "2": {"type": "taquin", "sequence": ["chemisier", "culotte", "jupe", "soutien_gorge"]},
            "3": {"type": "surprise", "sequence": ["soutien_gorge", "chemisier", "culotte", "jupe"]},
            "4": {"type": "personnalise", "sequence": ["chemisier", "jupe", "soutien_gorge", "culotte"]}  # Sera modifi√©
        }

        if choice not in sequence_options:
            return {
                "success": False,
                "message": "S√©quence invalide. Choisis 1, 2, 3 ou 4.",
                "continue": True
            }

        selected_sequence = sequence_options[choice]
        game_session["sequence_choice"] = selected_sequence
        game_session["current_step"] = 2
        game_session["sequence_progress"] = 0

        return {
            "success": True,
            "message": f"üé≠ S√©quence choisie: {selected_sequence['type']}\n\nüéØ STRIP-TEASE COMMENCE !\n\nüéµ La musique d√©marre, tu commences ton show...\nIl te regarde, hypnotis√©. Premi√®re pi√®ce: {selected_sequence['sequence'][0]}\n\nTiming: 'lent' / 'normal' / 'rapide' / 'tease'",
            "continue": True
        }

    def _strip_tease_execute(self, game_session: Dict[str, Any], timing_choice: str) -> Dict[str, Any]:
        """√âtape 3: ex√©cution strip-tease"""
        valid_timings = ["lent", "normal", "rapide", "tease"]
        if timing_choice not in valid_timings:
            return {
                "success": False,
                "message": f"Timing invalide. Options: {', '.join(valid_timings)}",
                "continue": True
            }

        sequence = game_session["sequence_choice"]["sequence"]
        progress = game_session["sequence_progress"]
        current_piece = sequence[progress]

        # Calcul score timing
        timing_score = self._calculate_strip_timing_score(timing_choice, game_session["music_choice"]["tempo"])
        game_session["performance_metrics"]["timing_scores"].append(timing_score)

        # G√©n√©ration narrative
        narrative = self._generate_strip_narrative(current_piece, timing_choice, timing_score)

        # Progression
        game_session["sequence_progress"] += 1

        if game_session["sequence_progress"] >= len(sequence):
            # Strip-tease termin√©
            game_session["current_step"] = 3
            return self._strip_tease_finale(game_session)
        else:
            # Pi√®ce suivante
            next_piece = sequence[game_session["sequence_progress"]]
            return {
                "success": True,
                "message": f"{narrative}\n\n‚ñ∂Ô∏è PI√àCE SUIVANTE: {next_piece}\nTiming: 'lent' / 'normal' / 'rapide' / 'tease'",
                "continue": True,
                "score": timing_score
            }

    def _strip_tease_finale(self, game_session: Dict[str, Any]) -> Dict[str, Any]:
        """Finale strip-tease avec r√©sultats"""
        # Calcul score total
        timing_scores = game_session["performance_metrics"]["timing_scores"]
        average_timing = sum(timing_scores) / len(timing_scores) if timing_scores else 50

        music_bonus = game_session["music_choice"]["style_bonus"]
        sequence_bonus = 10  # Bonus pour avoir termin√©

        total_score = int(average_timing + music_bonus + sequence_bonus)
        total_score = min(100, max(0, total_score))

        # Rating performance
        if total_score >= 85:
            rating = "excellent"
            narrative = "üî• STRIP-TEASE PARFAIT ! Il est compl√®tement hypnotis√©, son excitation est √† son maximum. Tu es une d√©esse de la s√©duction !"
            effects = {"npc_arousal": 30, "player_confidence": 20, "seduction_xp": 25}
        elif total_score >= 65:
            rating = "good"
            narrative = "‚ú® Excellent strip-tease ! Il ne peut d√©tacher ses yeux, son pantalon devient tr√®s serr√©..."
            effects = {"npc_arousal": 20, "player_confidence": 15, "seduction_xp": 15}
        else:
            rating = "poor"
            narrative = "üëç Strip-tease correct, mais tu peux faire mieux. Il appr√©cie mais n'est pas encore compl√®tement conquis."
            effects = {"npc_arousal": 10, "player_confidence": 5, "seduction_xp": 8}

        # Finalisation session
        game_session["status"] = "completed"

        result = MiniGameResult(
            success=True,
            score=total_score,
            performance_rating=rating,
            effects=effects,
            narrative_result=narrative,
            bonus_unlocks=["strip_tease_mastered"] if total_score >= 85 else []
        )

        return {
            "success": True,
            "minigame_completed": True,
            "result": result,
            "message": f"{narrative}\n\nüìä Score: {total_score}/100 ({rating})"
        }

    def _calculate_strip_timing_score(self, timing_choice: str, music_tempo: str) -> int:
        """Calcule score timing strip-tease"""
        base_scores = {"lent": 70, "normal": 60, "rapide": 50, "tease": 80}
        base_score = base_scores.get(timing_choice, 50)

        # Bonus si timing correspond √† tempo musique
        if (timing_choice == "lent" and music_tempo == "slow") or            (timing_choice == "rapide" and music_tempo == "fast") or            (timing_choice == "tease" and music_tempo == "variable"):
            base_score += 20

        # Variabilit√©
        return base_score + random.randint(-10, 10)

    def _generate_strip_narrative(self, piece: str, timing: str, score: int) -> str:
        """G√©n√®re narrative strip-tease"""
        narratives = {
            "chemisier": {
                "lent": "Tu d√©boutonnes lentement ton chemisier, r√©v√©lant progressivement ta peau nacr√©e...",
                "normal": "Tu ouvres ton chemisier avec assurance, d√©voilant ton d√©collet√©...",
                "rapide": "D'un geste rapide, tu ouvres compl√®tement ton chemisier...",
                "tease": "Tu joues avec les boutons, les ouvrant et refermant, le faisant languir..."
            },
            "jupe": {
                "lent": "Tu fais glisser ta jupe le long de tes hanches, centim√®tre par centim√®tre...",
                "normal": "Tu fais descendre ta jupe, r√©v√©lant tes jambes parfaites...",
                "rapide": "Ta jupe tombe au sol d'un coup, le surprenant...",
                "tease": "Tu soul√®ves et baisses ta jupe, jouant avec son impatience..."
            }
            # Plus de narratives...
        }

        base_narrative = narratives.get(piece, {}).get(timing, f"Tu retires {piece} avec style {timing}")

        if score >= 80:
            return f"{base_narrative} Il g√©mit doucement, compl√®tement captiv√©."
        elif score >= 60:
            return f"{base_narrative} Son regard br√ªlant suit chacun de tes mouvements."
        else:
            return f"{base_narrative} Il appr√©cie mais reste encore ma√Ætre de lui."

    # ========== MASSAGE SENSUEL ==========
    def _handle_massage_input(self, game_session: Dict[str, Any], player_input: str) -> Dict[str, Any]:
        """Mini-jeu massage sensuel"""
        # Impl√©mentation similaire au strip-tease mais pour massage
        # Zones: √©paules -> dos -> cuisses -> torse -> zones intimes
        # Techniques: pression, mouvement, rythme
        # Score selon progression et technique

        return {
            "success": True,
            "message": "ü§≤ Mini-jeu massage en d√©veloppement... Utilise 'quit' pour sortir.",
            "continue": True
        }

    # ========== D√âS DU D√âSIR ==========  
    def _handle_dice_input(self, game_session: Dict[str, Any], player_input: str) -> Dict[str, Any]:
        """Mini-jeu d√©s du d√©sir"""
        if player_input.lower() == "lancer":
            # Jet des 4 d√©s
            action_die = random.choice(["baiser", "caresse", "l√©cher", "sucer", "p√©n√©trer"])
            zone_die = random.choice(["cou", "seins", "cuisses", "sexe", "anus", "bouche"])
            intensity_die = random.choice(["doux", "normal", "intense", "sauvage"])
            duration_die = random.choice(["5sec", "30sec", "2min", "jusqu'orgasme"])

            result_text = f"üé≤ R√âSULTAT D√âS:\n"
            result_text += f"ACTION: {action_die}\n"
            result_text += f"ZONE: {zone_die}\n" 
            result_text += f"INTENSIT√â: {intensity_die}\n"
            result_text += f"DUR√âE: {duration_die}\n\n"
            result_text += "Accepter: 'ok' | Relancer: 'relancer' | Modifier: 'modifier' | Veto: 'veto'"

            game_session["dice_result"] = {
                "action": action_die,
                "zone": zone_die,
                "intensity": intensity_die,
                "duration": duration_die
            }

            return {"success": True, "message": result_text, "continue": True}

        return {"success": True, "message": "üé≤ D√©s du D√©sir pr√™ts ! Tape 'lancer' pour commencer.", "continue": True}

    # ========== SIMULATION SEXUELLE ==========
    def _handle_simulation_input(self, game_session: Dict[str, Any], player_input: str) -> Dict[str, Any]:
        """Mini-jeu simulation sexuelle compl√®te"""
        # Positions d√©bloqu√©es, contr√¥le rythme/intensit√©, multiple orgasmes

        return {
            "success": True,
            "message": "üõèÔ∏è Simulation sexuelle en d√©veloppement... Plus complexe √† impl√©menter.",
            "continue": True
        }

    def _get_default_minigame_configs(self) -> Dict[str, Any]:
        """Configurations mini-jeux par d√©faut"""
        return {
            "strip_tease": {
                "name": "Strip-tease Interactif",
                "description": "S√©duction par le d√©shabillage contr√¥l√©",
                "requirements": {
                    "min_privacy": 0.6,
                    "min_arousal": 40,
                    "min_seduction_level": 3
                },
                "max_score": 100,
                "instructions": "Choisis musique, s√©quence et timing pour un strip-tease parfait",
                "start_descriptions": {
                    "salon": "Dans l'intimit√© du salon, tu d√©cides de lui offrir un spectacle priv√©...",
                    "chambre": "Dans sa chambre, tu vas le rendre fou avec ton strip-tease...",
                    "default": "Tu d√©cides de te d√©shabiller sensuellement pour lui..."
                }
            },
            "massage_sensuel": {
                "name": "Massage Sensuel", 
                "description": "Escalation par le massage √©rotique",
                "requirements": {
                    "min_privacy": 0.7,
                    "min_arousal": 50,
                    "min_seduction_level": 4
                },
                "max_score": 100,
                "instructions": "Zones, techniques et progression pour massage parfait"
            },
            "des_desir": {
                "name": "D√©s du D√©sir",
                "description": "Hasard contr√¥l√© pour actions √©rotiques",
                "requirements": {
                    "min_privacy": 0.8,
                    "min_arousal": 60,
                    "min_seduction_level": 5
                },
                "max_score": 100,
                "instructions": "Lance les d√©s et n√©gocie le r√©sultat"
            },
            "simulation_sexuelle": {
                "name": "Simulation Sexuelle Compl√®te",
                "description": "Simulation positions et orgasmes",
                "requirements": {
                    "min_privacy": 1.0,
                    "min_arousal": 80,
                    "min_seduction_level": 8
                },
                "max_score": 100,
                "instructions": "Contr√¥le positions, rythme et intensit√©"
            }
        }

    def get_available_minigames(self, player_entity: Entity, context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Retourne mini-jeux disponibles selon contexte"""
        available = []

        for game_type, config in self.minigame_configs.items():
            requirements_check = self._check_minigame_requirements(game_type, player_entity, context)
            if requirements_check["valid"]:
                available.append({
                    "game_type": game_type,
                    "name": config.get("name", game_type),
                    "description": config.get("description", ""),
                    "max_score": config.get("max_score", 100)
                })

        return available

    def get_system_stats(self) -> Dict[str, Any]:
        """Statistiques syst√®me"""
        return {
            "system_name": self.name,
            "minigames_configured": len(self.minigame_configs),
            "active_sessions": len(self.active_minigames)
        }
